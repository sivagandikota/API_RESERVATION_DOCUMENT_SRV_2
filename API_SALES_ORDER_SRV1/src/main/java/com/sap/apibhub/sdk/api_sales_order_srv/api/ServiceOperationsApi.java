/*
 * Sales Order - Create, Read, Update, Delete (A2X)
 * You can use this service to integrate external  applications with sales order processing in SAP  S/4HANA Cloud. In every API call, you can make  use of the following operations:  - You can retrieve  sales orders. Apply any of the filters provided or  retrieve all existing data.  - You can create sales  orders. Note that you must use “deep insert”  requests (a header plus the following entities:  header partner, header pricing element, header  text, payment details, item, item partner, item  pricing element, and item text). You cannot create  entities without including any related entities.  - For  existing sales orders, you can create new items.  Note that you must use “deep insert” requests  (with the following entities: item partner, item pricing  element, and item text). You cannot create entities  without including any related entities.  - For existing  sales orders, you can update the header, header  partner, header pricing element, header text,  payment details, item, item partner, item pricing  element, and item text.  - For existing sales  orders, you can delete the header, header partner,  header pricing element, header text, payment  details, item, item partner, item pricing element,  and item text.  - You can accept or deny approval  requests for sales orders that cannot be processed  without the consent of an approver.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_sales_order_srv.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sap.apibhub.sdk.api_sales_order_srv.model.FunctionResult;
import com.sap.apibhub.sdk.api_sales_order_srv.model.OdataError;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ServiceOperationsApi {
    private ApiClient apiClient;

    public ServiceOperationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ServiceOperationsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for rejectApprovalRequestPost */
    private com.squareup.okhttp.Call rejectApprovalRequestPostCall(String salesOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/rejectApprovalRequest".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (salesOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "SalesOrder", salesOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call rejectApprovalRequestPostValidateBeforeCall(String salesOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesOrder' is set
        if (salesOrder == null) {
            throw new ApiException("Missing the required parameter 'salesOrder' when calling rejectApprovalRequestPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = rejectApprovalRequestPostCall(salesOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Invoke action rejectApprovalRequest
     * 
     * @param salesOrder Value needs to be enclosed in single quotes (required)
     * @return FunctionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FunctionResult rejectApprovalRequestPost(String salesOrder) throws ApiException {
        ApiResponse<FunctionResult> resp = rejectApprovalRequestPostWithHttpInfo(salesOrder);
        return resp.getData();
    }

    /**
     * Invoke action rejectApprovalRequest
     * 
     * @param salesOrder Value needs to be enclosed in single quotes (required)
     * @return ApiResponse&lt;FunctionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FunctionResult> rejectApprovalRequestPostWithHttpInfo(String salesOrder) throws ApiException {
        com.squareup.okhttp.Call call = rejectApprovalRequestPostValidateBeforeCall(salesOrder, null, null);
        Type localVarReturnType = new TypeToken<FunctionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Invoke action rejectApprovalRequest (asynchronously)
     * 
     * @param salesOrder Value needs to be enclosed in single quotes (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call rejectApprovalRequestPostAsync(String salesOrder, final ApiCallback<FunctionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = rejectApprovalRequestPostValidateBeforeCall(salesOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FunctionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for releaseApprovalRequestPost */
    private com.squareup.okhttp.Call releaseApprovalRequestPostCall(String salesOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/releaseApprovalRequest".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (salesOrder != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "SalesOrder", salesOrder));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call releaseApprovalRequestPostValidateBeforeCall(String salesOrder, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'salesOrder' is set
        if (salesOrder == null) {
            throw new ApiException("Missing the required parameter 'salesOrder' when calling releaseApprovalRequestPost(Async)");
        }
        
        
        com.squareup.okhttp.Call call = releaseApprovalRequestPostCall(salesOrder, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Invoke action releaseApprovalRequest
     * 
     * @param salesOrder Value needs to be enclosed in single quotes (required)
     * @return FunctionResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public FunctionResult releaseApprovalRequestPost(String salesOrder) throws ApiException {
        ApiResponse<FunctionResult> resp = releaseApprovalRequestPostWithHttpInfo(salesOrder);
        return resp.getData();
    }

    /**
     * Invoke action releaseApprovalRequest
     * 
     * @param salesOrder Value needs to be enclosed in single quotes (required)
     * @return ApiResponse&lt;FunctionResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<FunctionResult> releaseApprovalRequestPostWithHttpInfo(String salesOrder) throws ApiException {
        com.squareup.okhttp.Call call = releaseApprovalRequestPostValidateBeforeCall(salesOrder, null, null);
        Type localVarReturnType = new TypeToken<FunctionResult>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Invoke action releaseApprovalRequest (asynchronously)
     * 
     * @param salesOrder Value needs to be enclosed in single quotes (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call releaseApprovalRequestPostAsync(String salesOrder, final ApiCallback<FunctionResult> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = releaseApprovalRequestPostValidateBeforeCall(salesOrder, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<FunctionResult>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
