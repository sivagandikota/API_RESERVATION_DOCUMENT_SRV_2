/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sap.apibhub.sdk.api_business_partner.model.APIBUSINESSPARTNERABuPaAddressUsageType;
import com.sap.apibhub.sdk.api_business_partner.model.CreatedABuPaAddressUsageType;
import com.sap.apibhub.sdk.api_business_partner.model.ModifiedABuPaAddressUsageType;
import com.sap.apibhub.sdk.api_business_partner.model.OdataError;
import com.sap.apibhub.sdk.api_business_partner.model.Wrapper6;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ABuPaAddressUsageApi {
    private ApiClient apiClient;

    public ABuPaAddressUsageApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ABuPaAddressUsageApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete */
    private com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteCall(String businessPartner, String validityEndDate, String addressUsage, String addressID, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_BuPaAddressUsage(BusinessPartner='{BusinessPartner}',ValidityEndDate={ValidityEndDate},AddressUsage='{AddressUsage}',AddressID='{AddressID}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "BusinessPartner" + "\\}", apiClient.escapeString(businessPartner.toString()))
        .replaceAll("\\{" + "ValidityEndDate" + "\\}", apiClient.escapeString(validityEndDate.toString()))
        .replaceAll("\\{" + "AddressUsage" + "\\}", apiClient.escapeString(addressUsage.toString()))
        .replaceAll("\\{" + "AddressID" + "\\}", apiClient.escapeString(addressID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteValidateBeforeCall(String businessPartner, String validityEndDate, String addressUsage, String addressID, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessPartner' is set
        if (businessPartner == null) {
            throw new ApiException("Missing the required parameter 'businessPartner' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete(Async)");
        }
        
        // verify the required parameter 'validityEndDate' is set
        if (validityEndDate == null) {
            throw new ApiException("Missing the required parameter 'validityEndDate' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete(Async)");
        }
        
        // verify the required parameter 'addressUsage' is set
        if (addressUsage == null) {
            throw new ApiException("Missing the required parameter 'addressUsage' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete(Async)");
        }
        
        // verify the required parameter 'addressID' is set
        if (addressID == null) {
            throw new ApiException("Missing the required parameter 'addressID' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteCall(businessPartner, validityEndDate, addressUsage, addressID, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete entity from A_BuPaAddressUsage
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param ifMatch ETag (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDelete(String businessPartner, String validityEndDate, String addressUsage, String addressID, String ifMatch) throws ApiException {
        aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteWithHttpInfo(businessPartner, validityEndDate, addressUsage, addressID, ifMatch);
    }

    /**
     * Delete entity from A_BuPaAddressUsage
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param ifMatch ETag (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteWithHttpInfo(String businessPartner, String validityEndDate, String addressUsage, String addressID, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteValidateBeforeCall(businessPartner, validityEndDate, addressUsage, addressID, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete entity from A_BuPaAddressUsage (asynchronously)
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param ifMatch ETag (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteAsync(String businessPartner, String validityEndDate, String addressUsage, String addressID, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDDeleteValidateBeforeCall(businessPartner, validityEndDate, addressUsage, addressID, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet */
    private com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetCall(String businessPartner, String validityEndDate, String addressUsage, String addressID, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_BuPaAddressUsage(BusinessPartner='{BusinessPartner}',ValidityEndDate={ValidityEndDate},AddressUsage='{AddressUsage}',AddressID='{AddressID}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "BusinessPartner" + "\\}", apiClient.escapeString(businessPartner.toString()))
        .replaceAll("\\{" + "ValidityEndDate" + "\\}", apiClient.escapeString(validityEndDate.toString()))
        .replaceAll("\\{" + "AddressUsage" + "\\}", apiClient.escapeString(addressUsage.toString()))
        .replaceAll("\\{" + "AddressID" + "\\}", apiClient.escapeString(addressID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetValidateBeforeCall(String businessPartner, String validityEndDate, String addressUsage, String addressID, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessPartner' is set
        if (businessPartner == null) {
            throw new ApiException("Missing the required parameter 'businessPartner' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet(Async)");
        }
        
        // verify the required parameter 'validityEndDate' is set
        if (validityEndDate == null) {
            throw new ApiException("Missing the required parameter 'validityEndDate' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet(Async)");
        }
        
        // verify the required parameter 'addressUsage' is set
        if (addressUsage == null) {
            throw new ApiException("Missing the required parameter 'addressUsage' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet(Async)");
        }
        
        // verify the required parameter 'addressID' is set
        if (addressID == null) {
            throw new ApiException("Missing the required parameter 'addressID' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetCall(businessPartner, validityEndDate, addressUsage, addressID, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entity from A_BuPaAddressUsage by key
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return CreatedABuPaAddressUsageType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedABuPaAddressUsageType aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGet(String businessPartner, String validityEndDate, String addressUsage, String addressID, List<String> select) throws ApiException {
        ApiResponse<CreatedABuPaAddressUsageType> resp = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetWithHttpInfo(businessPartner, validityEndDate, addressUsage, addressID, select);
        return resp.getData();
    }

    /**
     * Get entity from A_BuPaAddressUsage by key
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;CreatedABuPaAddressUsageType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedABuPaAddressUsageType> aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetWithHttpInfo(String businessPartner, String validityEndDate, String addressUsage, String addressID, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetValidateBeforeCall(businessPartner, validityEndDate, addressUsage, addressID, select, null, null);
        Type localVarReturnType = new TypeToken<CreatedABuPaAddressUsageType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entity from A_BuPaAddressUsage by key (asynchronously)
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetAsync(String businessPartner, String validityEndDate, String addressUsage, String addressID, List<String> select, final ApiCallback<CreatedABuPaAddressUsageType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDGetValidateBeforeCall(businessPartner, validityEndDate, addressUsage, addressID, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedABuPaAddressUsageType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch */
    private com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchCall(String businessPartner, String validityEndDate, String addressUsage, String addressID, ModifiedABuPaAddressUsageType aBuPaAddressUsageType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aBuPaAddressUsageType;
        
        // create path and map variables
        String localVarPath = "/A_BuPaAddressUsage(BusinessPartner='{BusinessPartner}',ValidityEndDate={ValidityEndDate},AddressUsage='{AddressUsage}',AddressID='{AddressID}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "BusinessPartner" + "\\}", apiClient.escapeString(businessPartner.toString()))
        .replaceAll("\\{" + "ValidityEndDate" + "\\}", apiClient.escapeString(validityEndDate.toString()))
        .replaceAll("\\{" + "AddressUsage" + "\\}", apiClient.escapeString(addressUsage.toString()))
        .replaceAll("\\{" + "AddressID" + "\\}", apiClient.escapeString(addressID.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchValidateBeforeCall(String businessPartner, String validityEndDate, String addressUsage, String addressID, ModifiedABuPaAddressUsageType aBuPaAddressUsageType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'businessPartner' is set
        if (businessPartner == null) {
            throw new ApiException("Missing the required parameter 'businessPartner' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch(Async)");
        }
        
        // verify the required parameter 'validityEndDate' is set
        if (validityEndDate == null) {
            throw new ApiException("Missing the required parameter 'validityEndDate' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch(Async)");
        }
        
        // verify the required parameter 'addressUsage' is set
        if (addressUsage == null) {
            throw new ApiException("Missing the required parameter 'addressUsage' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch(Async)");
        }
        
        // verify the required parameter 'addressID' is set
        if (addressID == null) {
            throw new ApiException("Missing the required parameter 'addressID' when calling aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchCall(businessPartner, validityEndDate, addressUsage, addressID, aBuPaAddressUsageType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update entity in A_BuPaAddressUsage
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param aBuPaAddressUsageType New property values (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatch(String businessPartner, String validityEndDate, String addressUsage, String addressID, ModifiedABuPaAddressUsageType aBuPaAddressUsageType) throws ApiException {
        aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchWithHttpInfo(businessPartner, validityEndDate, addressUsage, addressID, aBuPaAddressUsageType);
    }

    /**
     * Update entity in A_BuPaAddressUsage
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param aBuPaAddressUsageType New property values (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchWithHttpInfo(String businessPartner, String validityEndDate, String addressUsage, String addressID, ModifiedABuPaAddressUsageType aBuPaAddressUsageType) throws ApiException {
        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchValidateBeforeCall(businessPartner, validityEndDate, addressUsage, addressID, aBuPaAddressUsageType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update entity in A_BuPaAddressUsage (asynchronously)
     * 
     * @param businessPartner Business Partner Number   Key identifying a business partner in the SAP system. The key is unique within a client. (required)
     * @param validityEndDate Validity End of a Business Partner Address Usage (required)
     * @param addressUsage Business partner attribute, which you can use to distinguish between various addresses by defining the address usage for communication with business partners.   Maintain the usage types for addresses (address types) in Customizing.You can create a short description and a name for the address type.When maintaining business partners you can use the function address usage to assign business partner addresses to address types.If necessary, you can set the indicator for multiple use in Customizing.Correspondence addressDelivery address (required)
     * @param addressID Internal key for identifying a Business Address Services address.   For more information about the meaning and use of the address number and the Business Address Services concepts, see the function group SZA0 documentation. (required)
     * @param aBuPaAddressUsageType New property values (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchAsync(String businessPartner, String validityEndDate, String addressUsage, String addressID, ModifiedABuPaAddressUsageType aBuPaAddressUsageType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aBuPaAddressUsageBusinessPartnerBusinessPartnerValidityEndDateValidityEndDateAddressUsageAddressUsageAddressIDAddressIDPatchValidateBeforeCall(businessPartner, validityEndDate, addressUsage, addressID, aBuPaAddressUsageType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aBuPaAddressUsageGet */
    private com.squareup.okhttp.Call aBuPaAddressUsageGetCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_BuPaAddressUsage".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$top", top));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$skip", skip));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$filter", filter));
        if (inlinecount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$inlinecount", inlinecount));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$orderby", orderby));
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aBuPaAddressUsageGetValidateBeforeCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aBuPaAddressUsageGetCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entities from A_BuPaAddressUsage
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return Wrapper6
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wrapper6 aBuPaAddressUsageGet(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        ApiResponse<Wrapper6> resp = aBuPaAddressUsageGetWithHttpInfo(top, skip, filter, inlinecount, orderby, select);
        return resp.getData();
    }

    /**
     * Get entities from A_BuPaAddressUsage
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;Wrapper6&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wrapper6> aBuPaAddressUsageGetWithHttpInfo(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aBuPaAddressUsageGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, null, null);
        Type localVarReturnType = new TypeToken<Wrapper6>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entities from A_BuPaAddressUsage (asynchronously)
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aBuPaAddressUsageGetAsync(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ApiCallback<Wrapper6> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aBuPaAddressUsageGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wrapper6>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aBuPaAddressUsagePost */
    private com.squareup.okhttp.Call aBuPaAddressUsagePostCall(APIBUSINESSPARTNERABuPaAddressUsageType aBuPaAddressUsageType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aBuPaAddressUsageType;
        
        // create path and map variables
        String localVarPath = "/A_BuPaAddressUsage".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aBuPaAddressUsagePostValidateBeforeCall(APIBUSINESSPARTNERABuPaAddressUsageType aBuPaAddressUsageType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aBuPaAddressUsagePostCall(aBuPaAddressUsageType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new entity to A_BuPaAddressUsage
     * 
     * @param aBuPaAddressUsageType New entity (optional)
     * @return CreatedABuPaAddressUsageType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedABuPaAddressUsageType aBuPaAddressUsagePost(APIBUSINESSPARTNERABuPaAddressUsageType aBuPaAddressUsageType) throws ApiException {
        ApiResponse<CreatedABuPaAddressUsageType> resp = aBuPaAddressUsagePostWithHttpInfo(aBuPaAddressUsageType);
        return resp.getData();
    }

    /**
     * Add new entity to A_BuPaAddressUsage
     * 
     * @param aBuPaAddressUsageType New entity (optional)
     * @return ApiResponse&lt;CreatedABuPaAddressUsageType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedABuPaAddressUsageType> aBuPaAddressUsagePostWithHttpInfo(APIBUSINESSPARTNERABuPaAddressUsageType aBuPaAddressUsageType) throws ApiException {
        com.squareup.okhttp.Call call = aBuPaAddressUsagePostValidateBeforeCall(aBuPaAddressUsageType, null, null);
        Type localVarReturnType = new TypeToken<CreatedABuPaAddressUsageType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new entity to A_BuPaAddressUsage (asynchronously)
     * 
     * @param aBuPaAddressUsageType New entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aBuPaAddressUsagePostAsync(APIBUSINESSPARTNERABuPaAddressUsageType aBuPaAddressUsageType, final ApiCallback<CreatedABuPaAddressUsageType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aBuPaAddressUsagePostValidateBeforeCall(aBuPaAddressUsageType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedABuPaAddressUsageType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
