/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Customer Sales Area Tax
 */
@ApiModel(description = "Customer Sales Area Tax")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-07T13:48:53.946Z")
public class APIBUSINESSPARTNERACustomerSalesAreaTaxType {
  @SerializedName("Customer")
  private String customer = null;

  @SerializedName("SalesOrganization")
  private String salesOrganization = null;

  @SerializedName("DistributionChannel")
  private String distributionChannel = null;

  @SerializedName("Division")
  private String division = null;

  @SerializedName("DepartureCountry")
  private String departureCountry = null;

  @SerializedName("CustomerTaxCategory")
  private String customerTaxCategory = null;

  public APIBUSINESSPARTNERACustomerSalesAreaTaxType customer(String customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system.
   * @return customer
  **/
  @ApiModelProperty(value = "Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system.")
  public String getCustomer() {
    return customer;
  }

  public void setCustomer(String customer) {
    this.customer = customer;
  }

  public APIBUSINESSPARTNERACustomerSalesAreaTaxType salesOrganization(String salesOrganization) {
    this.salesOrganization = salesOrganization;
    return this;
  }

   /**
   * An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area.
   * @return salesOrganization
  **/
  @ApiModelProperty(value = "An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area.")
  public String getSalesOrganization() {
    return salesOrganization;
  }

  public void setSalesOrganization(String salesOrganization) {
    this.salesOrganization = salesOrganization;
  }

  public APIBUSINESSPARTNERACustomerSalesAreaTaxType distributionChannel(String distributionChannel) {
    this.distributionChannel = distributionChannel;
    return this;
  }

   /**
   * Reference distrib.channel for cust.and material masters   Specifies a distribution channel that you want to use as a reference for customer and material master data for other distribution channels.   You can specify one distribution channel as the source of customer and material master data for other distribution channels. You need then only to maintain the data in one place.Distrib.channel Ref.distrib.channel01 0102 0103 0104 04In this example, only distribution channels 01 and 04 have customer and material master data defined. Distribution channels 01, 02, and 03 share the master data that you defined for distribution channel 01. Distribution channel 04 has its own master data. When you create a sales order in distribution channel 03, the system checks the customer and material master data against the data defined for distribution channel 01.
   * @return distributionChannel
  **/
  @ApiModelProperty(value = "Reference distrib.channel for cust.and material masters   Specifies a distribution channel that you want to use as a reference for customer and material master data for other distribution channels.   You can specify one distribution channel as the source of customer and material master data for other distribution channels. You need then only to maintain the data in one place.Distrib.channel Ref.distrib.channel01 0102 0103 0104 04In this example, only distribution channels 01 and 04 have customer and material master data defined. Distribution channels 01, 02, and 03 share the master data that you defined for distribution channel 01. Distribution channel 04 has its own master data. When you create a sales order in distribution channel 03, the system checks the customer and material master data against the data defined for distribution channel 01.")
  public String getDistributionChannel() {
    return distributionChannel;
  }

  public void setDistributionChannel(String distributionChannel) {
    this.distributionChannel = distributionChannel;
  }

  public APIBUSINESSPARTNERACustomerSalesAreaTaxType division(String division) {
    this.division = division;
    return this;
  }

   /**
   * A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions.
   * @return division
  **/
  @ApiModelProperty(value = "A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions.")
  public String getDivision() {
    return division;
  }

  public void setDivision(String division) {
    this.division = division;
  }

  public APIBUSINESSPARTNERACustomerSalesAreaTaxType departureCountry(String departureCountry) {
    this.departureCountry = departureCountry;
    return this;
  }

   /**
   * Departure country (country from which the goods are sent)   Identifies the country in which the delivery originates.   You can define the country key in a table. As a rule, it is a good idea to use the existing international standards for identifying vehicles from different countries (for example: USA &#x3D; United States, I &#x3D; Italy, and so on). The system uses the key tohelp determine the relevant taxes during pricingdetermine important country-specific standards (the length of postal codes and bank account numbers, for example)
   * @return departureCountry
  **/
  @ApiModelProperty(value = "Departure country (country from which the goods are sent)   Identifies the country in which the delivery originates.   You can define the country key in a table. As a rule, it is a good idea to use the existing international standards for identifying vehicles from different countries (for example: USA = United States, I = Italy, and so on). The system uses the key tohelp determine the relevant taxes during pricingdetermine important country-specific standards (the length of postal codes and bank account numbers, for example)")
  public String getDepartureCountry() {
    return departureCountry;
  }

  public void setDepartureCountry(String departureCountry) {
    this.departureCountry = departureCountry;
  }

  public APIBUSINESSPARTNERACustomerSalesAreaTaxType customerTaxCategory(String customerTaxCategory) {
    this.customerTaxCategory = customerTaxCategory;
    return this;
  }

   /**
   * Tax category (sales tax, federal sales tax,...)   Identifies the condition that the system uses to automatically determine country-specific taxes during pricing.   You can define one or more tax categories for each country. During sales order processing, the system applies the tax category according tothe geographical location of your delivering plant and the location of the customer receiving the goodstax classifications in the customer master record and the material master record.In the USA, for example, you can define tax categories for Federal Sales Tax and Federal Excise Tax. In the U.K., you can define a tax category for Value Added Tax (VAT).
   * @return customerTaxCategory
  **/
  @ApiModelProperty(value = "Tax category (sales tax, federal sales tax,...)   Identifies the condition that the system uses to automatically determine country-specific taxes during pricing.   You can define one or more tax categories for each country. During sales order processing, the system applies the tax category according tothe geographical location of your delivering plant and the location of the customer receiving the goodstax classifications in the customer master record and the material master record.In the USA, for example, you can define tax categories for Federal Sales Tax and Federal Excise Tax. In the U.K., you can define a tax category for Value Added Tax (VAT).")
  public String getCustomerTaxCategory() {
    return customerTaxCategory;
  }

  public void setCustomerTaxCategory(String customerTaxCategory) {
    this.customerTaxCategory = customerTaxCategory;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIBUSINESSPARTNERACustomerSalesAreaTaxType apIBUSINESSPARTNERACustomerSalesAreaTaxType = (APIBUSINESSPARTNERACustomerSalesAreaTaxType) o;
    return Objects.equals(this.customer, apIBUSINESSPARTNERACustomerSalesAreaTaxType.customer) &&
        Objects.equals(this.salesOrganization, apIBUSINESSPARTNERACustomerSalesAreaTaxType.salesOrganization) &&
        Objects.equals(this.distributionChannel, apIBUSINESSPARTNERACustomerSalesAreaTaxType.distributionChannel) &&
        Objects.equals(this.division, apIBUSINESSPARTNERACustomerSalesAreaTaxType.division) &&
        Objects.equals(this.departureCountry, apIBUSINESSPARTNERACustomerSalesAreaTaxType.departureCountry) &&
        Objects.equals(this.customerTaxCategory, apIBUSINESSPARTNERACustomerSalesAreaTaxType.customerTaxCategory);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIBUSINESSPARTNERACustomerSalesAreaTaxType {\n");
    
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    salesOrganization: ").append(toIndentedString(salesOrganization)).append("\n");
    sb.append("    distributionChannel: ").append(toIndentedString(distributionChannel)).append("\n");
    sb.append("    division: ").append(toIndentedString(division)).append("\n");
    sb.append("    departureCountry: ").append(toIndentedString(departureCountry)).append("\n");
    sb.append("    customerTaxCategory: ").append(toIndentedString(customerTaxCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

