/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sap.apibhub.sdk.api_business_partner.model.APIBUSINESSPARTNERACustomerWithHoldingTaxType;
import com.sap.apibhub.sdk.api_business_partner.model.CreatedACustomerWithHoldingTaxType;
import com.sap.apibhub.sdk.api_business_partner.model.ModifiedACustomerWithHoldingTaxType;
import com.sap.apibhub.sdk.api_business_partner.model.OdataError;
import com.sap.apibhub.sdk.api_business_partner.model.Wrapper19;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ACustomerWithHoldingTaxApi {
    private ApiClient apiClient;

    public ACustomerWithHoldingTaxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ACustomerWithHoldingTaxApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete */
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteCall(String customer, String companyCode, String withholdingTaxType, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_CustomerWithHoldingTax(Customer='{Customer}',CompanyCode='{CompanyCode}',WithholdingTaxType='{WithholdingTaxType}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Customer" + "\\}", apiClient.escapeString(customer.toString()))
        .replaceAll("\\{" + "CompanyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "WithholdingTaxType" + "\\}", apiClient.escapeString(withholdingTaxType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteValidateBeforeCall(String customer, String companyCode, String withholdingTaxType, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete(Async)");
        }
        
        // verify the required parameter 'withholdingTaxType' is set
        if (withholdingTaxType == null) {
            throw new ApiException("Missing the required parameter 'withholdingTaxType' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteCall(customer, companyCode, withholdingTaxType, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete entity from A_CustomerWithHoldingTax
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param ifMatch ETag (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDelete(String customer, String companyCode, String withholdingTaxType, String ifMatch) throws ApiException {
        aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteWithHttpInfo(customer, companyCode, withholdingTaxType, ifMatch);
    }

    /**
     * Delete entity from A_CustomerWithHoldingTax
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param ifMatch ETag (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteWithHttpInfo(String customer, String companyCode, String withholdingTaxType, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteValidateBeforeCall(customer, companyCode, withholdingTaxType, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete entity from A_CustomerWithHoldingTax (asynchronously)
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param ifMatch ETag (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteAsync(String customer, String companyCode, String withholdingTaxType, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeDeleteValidateBeforeCall(customer, companyCode, withholdingTaxType, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet */
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetCall(String customer, String companyCode, String withholdingTaxType, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_CustomerWithHoldingTax(Customer='{Customer}',CompanyCode='{CompanyCode}',WithholdingTaxType='{WithholdingTaxType}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Customer" + "\\}", apiClient.escapeString(customer.toString()))
        .replaceAll("\\{" + "CompanyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "WithholdingTaxType" + "\\}", apiClient.escapeString(withholdingTaxType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetValidateBeforeCall(String customer, String companyCode, String withholdingTaxType, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet(Async)");
        }
        
        // verify the required parameter 'withholdingTaxType' is set
        if (withholdingTaxType == null) {
            throw new ApiException("Missing the required parameter 'withholdingTaxType' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetCall(customer, companyCode, withholdingTaxType, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entity from A_CustomerWithHoldingTax by key
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return CreatedACustomerWithHoldingTaxType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedACustomerWithHoldingTaxType aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGet(String customer, String companyCode, String withholdingTaxType, List<String> select) throws ApiException {
        ApiResponse<CreatedACustomerWithHoldingTaxType> resp = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetWithHttpInfo(customer, companyCode, withholdingTaxType, select);
        return resp.getData();
    }

    /**
     * Get entity from A_CustomerWithHoldingTax by key
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;CreatedACustomerWithHoldingTaxType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedACustomerWithHoldingTaxType> aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetWithHttpInfo(String customer, String companyCode, String withholdingTaxType, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetValidateBeforeCall(customer, companyCode, withholdingTaxType, select, null, null);
        Type localVarReturnType = new TypeToken<CreatedACustomerWithHoldingTaxType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entity from A_CustomerWithHoldingTax by key (asynchronously)
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetAsync(String customer, String companyCode, String withholdingTaxType, List<String> select, final ApiCallback<CreatedACustomerWithHoldingTaxType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypeGetValidateBeforeCall(customer, companyCode, withholdingTaxType, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedACustomerWithHoldingTaxType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch */
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchCall(String customer, String companyCode, String withholdingTaxType, ModifiedACustomerWithHoldingTaxType aCustomerWithHoldingTaxType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aCustomerWithHoldingTaxType;
        
        // create path and map variables
        String localVarPath = "/A_CustomerWithHoldingTax(Customer='{Customer}',CompanyCode='{CompanyCode}',WithholdingTaxType='{WithholdingTaxType}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Customer" + "\\}", apiClient.escapeString(customer.toString()))
        .replaceAll("\\{" + "CompanyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "WithholdingTaxType" + "\\}", apiClient.escapeString(withholdingTaxType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchValidateBeforeCall(String customer, String companyCode, String withholdingTaxType, ModifiedACustomerWithHoldingTaxType aCustomerWithHoldingTaxType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch(Async)");
        }
        
        // verify the required parameter 'withholdingTaxType' is set
        if (withholdingTaxType == null) {
            throw new ApiException("Missing the required parameter 'withholdingTaxType' when calling aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchCall(customer, companyCode, withholdingTaxType, aCustomerWithHoldingTaxType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update entity in A_CustomerWithHoldingTax
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param aCustomerWithHoldingTaxType New property values (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatch(String customer, String companyCode, String withholdingTaxType, ModifiedACustomerWithHoldingTaxType aCustomerWithHoldingTaxType) throws ApiException {
        aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchWithHttpInfo(customer, companyCode, withholdingTaxType, aCustomerWithHoldingTaxType);
    }

    /**
     * Update entity in A_CustomerWithHoldingTax
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param aCustomerWithHoldingTaxType New property values (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchWithHttpInfo(String customer, String companyCode, String withholdingTaxType, ModifiedACustomerWithHoldingTaxType aCustomerWithHoldingTaxType) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchValidateBeforeCall(customer, companyCode, withholdingTaxType, aCustomerWithHoldingTaxType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update entity in A_CustomerWithHoldingTax (asynchronously)
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param withholdingTaxType Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible. (required)
     * @param aCustomerWithHoldingTaxType New property values (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchAsync(String customer, String companyCode, String withholdingTaxType, ModifiedACustomerWithHoldingTaxType aCustomerWithHoldingTaxType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxCustomerCustomerCompanyCodeCompanyCodeWithholdingTaxTypeWithholdingTaxTypePatchValidateBeforeCall(customer, companyCode, withholdingTaxType, aCustomerWithHoldingTaxType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aCustomerWithHoldingTaxGet */
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxGetCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_CustomerWithHoldingTax".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$top", top));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$skip", skip));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$filter", filter));
        if (inlinecount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$inlinecount", inlinecount));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$orderby", orderby));
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxGetValidateBeforeCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxGetCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entities from A_CustomerWithHoldingTax
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return Wrapper19
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wrapper19 aCustomerWithHoldingTaxGet(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        ApiResponse<Wrapper19> resp = aCustomerWithHoldingTaxGetWithHttpInfo(top, skip, filter, inlinecount, orderby, select);
        return resp.getData();
    }

    /**
     * Get entities from A_CustomerWithHoldingTax
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;Wrapper19&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wrapper19> aCustomerWithHoldingTaxGetWithHttpInfo(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, null, null);
        Type localVarReturnType = new TypeToken<Wrapper19>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entities from A_CustomerWithHoldingTax (asynchronously)
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerWithHoldingTaxGetAsync(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ApiCallback<Wrapper19> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wrapper19>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aCustomerWithHoldingTaxPost */
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxPostCall(APIBUSINESSPARTNERACustomerWithHoldingTaxType aCustomerWithHoldingTaxType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aCustomerWithHoldingTaxType;
        
        // create path and map variables
        String localVarPath = "/A_CustomerWithHoldingTax".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerWithHoldingTaxPostValidateBeforeCall(APIBUSINESSPARTNERACustomerWithHoldingTaxType aCustomerWithHoldingTaxType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxPostCall(aCustomerWithHoldingTaxType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new entity to A_CustomerWithHoldingTax
     * 
     * @param aCustomerWithHoldingTaxType New entity (optional)
     * @return CreatedACustomerWithHoldingTaxType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedACustomerWithHoldingTaxType aCustomerWithHoldingTaxPost(APIBUSINESSPARTNERACustomerWithHoldingTaxType aCustomerWithHoldingTaxType) throws ApiException {
        ApiResponse<CreatedACustomerWithHoldingTaxType> resp = aCustomerWithHoldingTaxPostWithHttpInfo(aCustomerWithHoldingTaxType);
        return resp.getData();
    }

    /**
     * Add new entity to A_CustomerWithHoldingTax
     * 
     * @param aCustomerWithHoldingTaxType New entity (optional)
     * @return ApiResponse&lt;CreatedACustomerWithHoldingTaxType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedACustomerWithHoldingTaxType> aCustomerWithHoldingTaxPostWithHttpInfo(APIBUSINESSPARTNERACustomerWithHoldingTaxType aCustomerWithHoldingTaxType) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxPostValidateBeforeCall(aCustomerWithHoldingTaxType, null, null);
        Type localVarReturnType = new TypeToken<CreatedACustomerWithHoldingTaxType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new entity to A_CustomerWithHoldingTax (asynchronously)
     * 
     * @param aCustomerWithHoldingTaxType New entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerWithHoldingTaxPostAsync(APIBUSINESSPARTNERACustomerWithHoldingTaxType aCustomerWithHoldingTaxType, final ApiCallback<CreatedACustomerWithHoldingTaxType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerWithHoldingTaxPostValidateBeforeCall(aCustomerWithHoldingTaxType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedACustomerWithHoldingTaxType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
