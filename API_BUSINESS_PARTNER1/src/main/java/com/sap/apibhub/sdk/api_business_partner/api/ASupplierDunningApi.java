/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sap.apibhub.sdk.api_business_partner.model.APIBUSINESSPARTNERASupplierDunningType;
import com.sap.apibhub.sdk.api_business_partner.model.CreatedASupplierDunningType;
import com.sap.apibhub.sdk.api_business_partner.model.ModifiedASupplierDunningType;
import com.sap.apibhub.sdk.api_business_partner.model.OdataError;
import com.sap.apibhub.sdk.api_business_partner.model.Wrapper23;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ASupplierDunningApi {
    private ApiClient apiClient;

    public ASupplierDunningApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ASupplierDunningApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for aSupplierDunningGet */
    private com.squareup.okhttp.Call aSupplierDunningGetCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_SupplierDunning".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$top", top));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$skip", skip));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$filter", filter));
        if (inlinecount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$inlinecount", inlinecount));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$orderby", orderby));
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierDunningGetValidateBeforeCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aSupplierDunningGetCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entities from A_SupplierDunning
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return Wrapper23
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wrapper23 aSupplierDunningGet(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        ApiResponse<Wrapper23> resp = aSupplierDunningGetWithHttpInfo(top, skip, filter, inlinecount, orderby, select);
        return resp.getData();
    }

    /**
     * Get entities from A_SupplierDunning
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;Wrapper23&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wrapper23> aSupplierDunningGetWithHttpInfo(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierDunningGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, null, null);
        Type localVarReturnType = new TypeToken<Wrapper23>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entities from A_SupplierDunning (asynchronously)
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierDunningGetAsync(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ApiCallback<Wrapper23> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierDunningGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wrapper23>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aSupplierDunningPost */
    private com.squareup.okhttp.Call aSupplierDunningPostCall(APIBUSINESSPARTNERASupplierDunningType aSupplierDunningType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aSupplierDunningType;
        
        // create path and map variables
        String localVarPath = "/A_SupplierDunning".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierDunningPostValidateBeforeCall(APIBUSINESSPARTNERASupplierDunningType aSupplierDunningType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aSupplierDunningPostCall(aSupplierDunningType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new entity to A_SupplierDunning
     * 
     * @param aSupplierDunningType New entity (optional)
     * @return CreatedASupplierDunningType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedASupplierDunningType aSupplierDunningPost(APIBUSINESSPARTNERASupplierDunningType aSupplierDunningType) throws ApiException {
        ApiResponse<CreatedASupplierDunningType> resp = aSupplierDunningPostWithHttpInfo(aSupplierDunningType);
        return resp.getData();
    }

    /**
     * Add new entity to A_SupplierDunning
     * 
     * @param aSupplierDunningType New entity (optional)
     * @return ApiResponse&lt;CreatedASupplierDunningType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedASupplierDunningType> aSupplierDunningPostWithHttpInfo(APIBUSINESSPARTNERASupplierDunningType aSupplierDunningType) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierDunningPostValidateBeforeCall(aSupplierDunningType, null, null);
        Type localVarReturnType = new TypeToken<CreatedASupplierDunningType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new entity to A_SupplierDunning (asynchronously)
     * 
     * @param aSupplierDunningType New entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierDunningPostAsync(APIBUSINESSPARTNERASupplierDunningType aSupplierDunningType, final ApiCallback<CreatedASupplierDunningType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierDunningPostValidateBeforeCall(aSupplierDunningType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedASupplierDunningType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete */
    private com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteCall(String supplier, String companyCode, String dunningArea, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_SupplierDunning(Supplier='{Supplier}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Supplier" + "\\}", apiClient.escapeString(supplier.toString()))
        .replaceAll("\\{" + "CompanyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "DunningArea" + "\\}", apiClient.escapeString(dunningArea.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteValidateBeforeCall(String supplier, String companyCode, String dunningArea, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supplier' is set
        if (supplier == null) {
            throw new ApiException("Missing the required parameter 'supplier' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete(Async)");
        }
        
        // verify the required parameter 'dunningArea' is set
        if (dunningArea == null) {
            throw new ApiException("Missing the required parameter 'dunningArea' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteCall(supplier, companyCode, dunningArea, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete entity from A_SupplierDunning
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param ifMatch ETag (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDelete(String supplier, String companyCode, String dunningArea, String ifMatch) throws ApiException {
        aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteWithHttpInfo(supplier, companyCode, dunningArea, ifMatch);
    }

    /**
     * Delete entity from A_SupplierDunning
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param ifMatch ETag (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteWithHttpInfo(String supplier, String companyCode, String dunningArea, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteValidateBeforeCall(supplier, companyCode, dunningArea, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete entity from A_SupplierDunning (asynchronously)
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param ifMatch ETag (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteAsync(String supplier, String companyCode, String dunningArea, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaDeleteValidateBeforeCall(supplier, companyCode, dunningArea, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet */
    private com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetCall(String supplier, String companyCode, String dunningArea, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_SupplierDunning(Supplier='{Supplier}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Supplier" + "\\}", apiClient.escapeString(supplier.toString()))
        .replaceAll("\\{" + "CompanyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "DunningArea" + "\\}", apiClient.escapeString(dunningArea.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetValidateBeforeCall(String supplier, String companyCode, String dunningArea, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supplier' is set
        if (supplier == null) {
            throw new ApiException("Missing the required parameter 'supplier' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet(Async)");
        }
        
        // verify the required parameter 'dunningArea' is set
        if (dunningArea == null) {
            throw new ApiException("Missing the required parameter 'dunningArea' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetCall(supplier, companyCode, dunningArea, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entity from A_SupplierDunning by key
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return CreatedASupplierDunningType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedASupplierDunningType aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGet(String supplier, String companyCode, String dunningArea, List<String> select) throws ApiException {
        ApiResponse<CreatedASupplierDunningType> resp = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetWithHttpInfo(supplier, companyCode, dunningArea, select);
        return resp.getData();
    }

    /**
     * Get entity from A_SupplierDunning by key
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;CreatedASupplierDunningType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedASupplierDunningType> aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetWithHttpInfo(String supplier, String companyCode, String dunningArea, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetValidateBeforeCall(supplier, companyCode, dunningArea, select, null, null);
        Type localVarReturnType = new TypeToken<CreatedASupplierDunningType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entity from A_SupplierDunning by key (asynchronously)
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetAsync(String supplier, String companyCode, String dunningArea, List<String> select, final ApiCallback<CreatedASupplierDunningType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaGetValidateBeforeCall(supplier, companyCode, dunningArea, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedASupplierDunningType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch */
    private com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchCall(String supplier, String companyCode, String dunningArea, ModifiedASupplierDunningType aSupplierDunningType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aSupplierDunningType;
        
        // create path and map variables
        String localVarPath = "/A_SupplierDunning(Supplier='{Supplier}',CompanyCode='{CompanyCode}',DunningArea='{DunningArea}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Supplier" + "\\}", apiClient.escapeString(supplier.toString()))
        .replaceAll("\\{" + "CompanyCode" + "\\}", apiClient.escapeString(companyCode.toString()))
        .replaceAll("\\{" + "DunningArea" + "\\}", apiClient.escapeString(dunningArea.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchValidateBeforeCall(String supplier, String companyCode, String dunningArea, ModifiedASupplierDunningType aSupplierDunningType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supplier' is set
        if (supplier == null) {
            throw new ApiException("Missing the required parameter 'supplier' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch(Async)");
        }
        
        // verify the required parameter 'companyCode' is set
        if (companyCode == null) {
            throw new ApiException("Missing the required parameter 'companyCode' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch(Async)");
        }
        
        // verify the required parameter 'dunningArea' is set
        if (dunningArea == null) {
            throw new ApiException("Missing the required parameter 'dunningArea' when calling aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchCall(supplier, companyCode, dunningArea, aSupplierDunningType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update entity in A_SupplierDunning
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param aSupplierDunningType New property values (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatch(String supplier, String companyCode, String dunningArea, ModifiedASupplierDunningType aSupplierDunningType) throws ApiException {
        aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchWithHttpInfo(supplier, companyCode, dunningArea, aSupplierDunningType);
    }

    /**
     * Update entity in A_SupplierDunning
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param aSupplierDunningType New property values (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchWithHttpInfo(String supplier, String companyCode, String dunningArea, ModifiedASupplierDunningType aSupplierDunningType) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchValidateBeforeCall(supplier, companyCode, dunningArea, aSupplierDunningType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update entity in A_SupplierDunning (asynchronously)
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param companyCode The company code is an organizational unit within financial accounting. (required)
     * @param dunningArea The dunning area represents an organizational entity that is responsible for dunning. The dunning areas represent a sub-structure of the company codes.   If different responsibilities or different dunning procedures exist within a company code, you can set up corresponding dunning areas.All dunning notices are made separately according to dunning areas, and if necessary with different dunning procedures.The dunning area must be noted in the line items. As long as documents are copied from preliminary work areas (billing documents), the dunning area can be derived from details such as division or sales area, if necessary. (required)
     * @param aSupplierDunningType New property values (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchAsync(String supplier, String companyCode, String dunningArea, ModifiedASupplierDunningType aSupplierDunningType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierDunningSupplierSupplierCompanyCodeCompanyCodeDunningAreaDunningAreaPatchValidateBeforeCall(supplier, companyCode, dunningArea, aSupplierDunningType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
