/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Customer WithHolding Tax
 */
@ApiModel(description = "Customer WithHolding Tax")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-07T13:48:53.946Z")
public class APIBUSINESSPARTNERACustomerWithHoldingTaxType {
  @SerializedName("Customer")
  private String customer = null;

  @SerializedName("CompanyCode")
  private String companyCode = null;

  @SerializedName("WithholdingTaxType")
  private String withholdingTaxType = null;

  public APIBUSINESSPARTNERACustomerWithHoldingTaxType customer(String customer) {
    this.customer = customer;
    return this;
  }

   /**
   * Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system.
   * @return customer
  **/
  @ApiModelProperty(value = "Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system.")
  public String getCustomer() {
    return customer;
  }

  public void setCustomer(String customer) {
    this.customer = customer;
  }

  public APIBUSINESSPARTNERACustomerWithHoldingTaxType companyCode(String companyCode) {
    this.companyCode = companyCode;
    return this;
  }

   /**
   * The company code is an organizational unit within financial accounting.
   * @return companyCode
  **/
  @ApiModelProperty(value = "The company code is an organizational unit within financial accounting.")
  public String getCompanyCode() {
    return companyCode;
  }

  public void setCompanyCode(String companyCode) {
    this.companyCode = companyCode;
  }

  public APIBUSINESSPARTNERACustomerWithHoldingTaxType withholdingTaxType(String withholdingTaxType) {
    this.withholdingTaxType = withholdingTaxType;
    return this;
  }

   /**
   * Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible.
   * @return withholdingTaxType
  **/
  @ApiModelProperty(value = "Indicator for Withholding Tax Type   This indicator is used to classify the different types of withholding tax.   Withholding tax types classify particular features of a withholding tax including:The time at which the withholding tax is postedThe basis on which the base amount is calculatedThe basis for accumulation (if applicable)Withholding tax types are to be distinguished from withholding tax codes, to which are allocated the withholding tax percentage rate example.Whether a withholding tax can be defined as an existing type by means of a new code, or if a new type needs to be defined will depend on the type of transaction (see below).Note that a business transaction can only be assigned one withholding tax code per withholding tax type. If the business transaction is subject to several withholding taxes simultaneously, these must be represented by different types.This is the case in Argentina for example, where up to four kinds of withholding tax per business transaction are possible.")
  public String getWithholdingTaxType() {
    return withholdingTaxType;
  }

  public void setWithholdingTaxType(String withholdingTaxType) {
    this.withholdingTaxType = withholdingTaxType;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIBUSINESSPARTNERACustomerWithHoldingTaxType apIBUSINESSPARTNERACustomerWithHoldingTaxType = (APIBUSINESSPARTNERACustomerWithHoldingTaxType) o;
    return Objects.equals(this.customer, apIBUSINESSPARTNERACustomerWithHoldingTaxType.customer) &&
        Objects.equals(this.companyCode, apIBUSINESSPARTNERACustomerWithHoldingTaxType.companyCode) &&
        Objects.equals(this.withholdingTaxType, apIBUSINESSPARTNERACustomerWithHoldingTaxType.withholdingTaxType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customer, companyCode, withholdingTaxType);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIBUSINESSPARTNERACustomerWithHoldingTaxType {\n");
    
    sb.append("    customer: ").append(toIndentedString(customer)).append("\n");
    sb.append("    companyCode: ").append(toIndentedString(companyCode)).append("\n");
    sb.append("    withholdingTaxType: ").append(toIndentedString(withholdingTaxType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

