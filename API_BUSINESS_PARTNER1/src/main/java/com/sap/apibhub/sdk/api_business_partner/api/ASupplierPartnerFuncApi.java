/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sap.apibhub.sdk.api_business_partner.model.APIBUSINESSPARTNERASupplierPartnerFuncType;
import com.sap.apibhub.sdk.api_business_partner.model.CreatedASupplierPartnerFuncType;
import com.sap.apibhub.sdk.api_business_partner.model.ModifiedASupplierPartnerFuncType;
import com.sap.apibhub.sdk.api_business_partner.model.OdataError;
import com.sap.apibhub.sdk.api_business_partner.model.Wrapper24;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ASupplierPartnerFuncApi {
    private ApiClient apiClient;

    public ASupplierPartnerFuncApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ASupplierPartnerFuncApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for aSupplierPartnerFuncGet */
    private com.squareup.okhttp.Call aSupplierPartnerFuncGetCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_SupplierPartnerFunc".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$top", top));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$skip", skip));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$filter", filter));
        if (inlinecount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$inlinecount", inlinecount));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$orderby", orderby));
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierPartnerFuncGetValidateBeforeCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aSupplierPartnerFuncGetCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entities from A_SupplierPartnerFunc
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return Wrapper24
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wrapper24 aSupplierPartnerFuncGet(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        ApiResponse<Wrapper24> resp = aSupplierPartnerFuncGetWithHttpInfo(top, skip, filter, inlinecount, orderby, select);
        return resp.getData();
    }

    /**
     * Get entities from A_SupplierPartnerFunc
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;Wrapper24&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wrapper24> aSupplierPartnerFuncGetWithHttpInfo(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierPartnerFuncGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, null, null);
        Type localVarReturnType = new TypeToken<Wrapper24>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entities from A_SupplierPartnerFunc (asynchronously)
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierPartnerFuncGetAsync(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ApiCallback<Wrapper24> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierPartnerFuncGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wrapper24>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aSupplierPartnerFuncPost */
    private com.squareup.okhttp.Call aSupplierPartnerFuncPostCall(APIBUSINESSPARTNERASupplierPartnerFuncType aSupplierPartnerFuncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aSupplierPartnerFuncType;
        
        // create path and map variables
        String localVarPath = "/A_SupplierPartnerFunc".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierPartnerFuncPostValidateBeforeCall(APIBUSINESSPARTNERASupplierPartnerFuncType aSupplierPartnerFuncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aSupplierPartnerFuncPostCall(aSupplierPartnerFuncType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new entity to A_SupplierPartnerFunc
     * 
     * @param aSupplierPartnerFuncType New entity (optional)
     * @return CreatedASupplierPartnerFuncType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedASupplierPartnerFuncType aSupplierPartnerFuncPost(APIBUSINESSPARTNERASupplierPartnerFuncType aSupplierPartnerFuncType) throws ApiException {
        ApiResponse<CreatedASupplierPartnerFuncType> resp = aSupplierPartnerFuncPostWithHttpInfo(aSupplierPartnerFuncType);
        return resp.getData();
    }

    /**
     * Add new entity to A_SupplierPartnerFunc
     * 
     * @param aSupplierPartnerFuncType New entity (optional)
     * @return ApiResponse&lt;CreatedASupplierPartnerFuncType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedASupplierPartnerFuncType> aSupplierPartnerFuncPostWithHttpInfo(APIBUSINESSPARTNERASupplierPartnerFuncType aSupplierPartnerFuncType) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierPartnerFuncPostValidateBeforeCall(aSupplierPartnerFuncType, null, null);
        Type localVarReturnType = new TypeToken<CreatedASupplierPartnerFuncType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new entity to A_SupplierPartnerFunc (asynchronously)
     * 
     * @param aSupplierPartnerFuncType New entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierPartnerFuncPostAsync(APIBUSINESSPARTNERASupplierPartnerFuncType aSupplierPartnerFuncType, final ApiCallback<CreatedASupplierPartnerFuncType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierPartnerFuncPostValidateBeforeCall(aSupplierPartnerFuncType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedASupplierPartnerFuncType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete */
    private com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteCall(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_SupplierPartnerFunc(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}',SupplierSubrange='{SupplierSubrange}',Plant='{Plant}',PartnerFunction='{PartnerFunction}',PartnerCounter='{PartnerCounter}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Supplier" + "\\}", apiClient.escapeString(supplier.toString()))
        .replaceAll("\\{" + "PurchasingOrganization" + "\\}", apiClient.escapeString(purchasingOrganization.toString()))
        .replaceAll("\\{" + "SupplierSubrange" + "\\}", apiClient.escapeString(supplierSubrange.toString()))
        .replaceAll("\\{" + "Plant" + "\\}", apiClient.escapeString(plant.toString()))
        .replaceAll("\\{" + "PartnerFunction" + "\\}", apiClient.escapeString(partnerFunction.toString()))
        .replaceAll("\\{" + "PartnerCounter" + "\\}", apiClient.escapeString(partnerCounter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteValidateBeforeCall(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supplier' is set
        if (supplier == null) {
            throw new ApiException("Missing the required parameter 'supplier' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete(Async)");
        }
        
        // verify the required parameter 'purchasingOrganization' is set
        if (purchasingOrganization == null) {
            throw new ApiException("Missing the required parameter 'purchasingOrganization' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete(Async)");
        }
        
        // verify the required parameter 'supplierSubrange' is set
        if (supplierSubrange == null) {
            throw new ApiException("Missing the required parameter 'supplierSubrange' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete(Async)");
        }
        
        // verify the required parameter 'plant' is set
        if (plant == null) {
            throw new ApiException("Missing the required parameter 'plant' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete(Async)");
        }
        
        // verify the required parameter 'partnerFunction' is set
        if (partnerFunction == null) {
            throw new ApiException("Missing the required parameter 'partnerFunction' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete(Async)");
        }
        
        // verify the required parameter 'partnerCounter' is set
        if (partnerCounter == null) {
            throw new ApiException("Missing the required parameter 'partnerCounter' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete entity from A_SupplierPartnerFunc
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param ifMatch ETag (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDelete(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, String ifMatch) throws ApiException {
        aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteWithHttpInfo(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, ifMatch);
    }

    /**
     * Delete entity from A_SupplierPartnerFunc
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param ifMatch ETag (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteWithHttpInfo(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteValidateBeforeCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete entity from A_SupplierPartnerFunc (asynchronously)
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param ifMatch ETag (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteAsync(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterDeleteValidateBeforeCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet */
    private com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetCall(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_SupplierPartnerFunc(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}',SupplierSubrange='{SupplierSubrange}',Plant='{Plant}',PartnerFunction='{PartnerFunction}',PartnerCounter='{PartnerCounter}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Supplier" + "\\}", apiClient.escapeString(supplier.toString()))
        .replaceAll("\\{" + "PurchasingOrganization" + "\\}", apiClient.escapeString(purchasingOrganization.toString()))
        .replaceAll("\\{" + "SupplierSubrange" + "\\}", apiClient.escapeString(supplierSubrange.toString()))
        .replaceAll("\\{" + "Plant" + "\\}", apiClient.escapeString(plant.toString()))
        .replaceAll("\\{" + "PartnerFunction" + "\\}", apiClient.escapeString(partnerFunction.toString()))
        .replaceAll("\\{" + "PartnerCounter" + "\\}", apiClient.escapeString(partnerCounter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetValidateBeforeCall(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supplier' is set
        if (supplier == null) {
            throw new ApiException("Missing the required parameter 'supplier' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet(Async)");
        }
        
        // verify the required parameter 'purchasingOrganization' is set
        if (purchasingOrganization == null) {
            throw new ApiException("Missing the required parameter 'purchasingOrganization' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet(Async)");
        }
        
        // verify the required parameter 'supplierSubrange' is set
        if (supplierSubrange == null) {
            throw new ApiException("Missing the required parameter 'supplierSubrange' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet(Async)");
        }
        
        // verify the required parameter 'plant' is set
        if (plant == null) {
            throw new ApiException("Missing the required parameter 'plant' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet(Async)");
        }
        
        // verify the required parameter 'partnerFunction' is set
        if (partnerFunction == null) {
            throw new ApiException("Missing the required parameter 'partnerFunction' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet(Async)");
        }
        
        // verify the required parameter 'partnerCounter' is set
        if (partnerCounter == null) {
            throw new ApiException("Missing the required parameter 'partnerCounter' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entity from A_SupplierPartnerFunc by key
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return CreatedASupplierPartnerFuncType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedASupplierPartnerFuncType aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGet(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, List<String> select) throws ApiException {
        ApiResponse<CreatedASupplierPartnerFuncType> resp = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetWithHttpInfo(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, select);
        return resp.getData();
    }

    /**
     * Get entity from A_SupplierPartnerFunc by key
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;CreatedASupplierPartnerFuncType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedASupplierPartnerFuncType> aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetWithHttpInfo(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetValidateBeforeCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, select, null, null);
        Type localVarReturnType = new TypeToken<CreatedASupplierPartnerFuncType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entity from A_SupplierPartnerFunc by key (asynchronously)
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetAsync(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, List<String> select, final ApiCallback<CreatedASupplierPartnerFuncType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterGetValidateBeforeCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedASupplierPartnerFuncType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch */
    private com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchCall(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, ModifiedASupplierPartnerFuncType aSupplierPartnerFuncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aSupplierPartnerFuncType;
        
        // create path and map variables
        String localVarPath = "/A_SupplierPartnerFunc(Supplier='{Supplier}',PurchasingOrganization='{PurchasingOrganization}',SupplierSubrange='{SupplierSubrange}',Plant='{Plant}',PartnerFunction='{PartnerFunction}',PartnerCounter='{PartnerCounter}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Supplier" + "\\}", apiClient.escapeString(supplier.toString()))
        .replaceAll("\\{" + "PurchasingOrganization" + "\\}", apiClient.escapeString(purchasingOrganization.toString()))
        .replaceAll("\\{" + "SupplierSubrange" + "\\}", apiClient.escapeString(supplierSubrange.toString()))
        .replaceAll("\\{" + "Plant" + "\\}", apiClient.escapeString(plant.toString()))
        .replaceAll("\\{" + "PartnerFunction" + "\\}", apiClient.escapeString(partnerFunction.toString()))
        .replaceAll("\\{" + "PartnerCounter" + "\\}", apiClient.escapeString(partnerCounter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchValidateBeforeCall(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, ModifiedASupplierPartnerFuncType aSupplierPartnerFuncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'supplier' is set
        if (supplier == null) {
            throw new ApiException("Missing the required parameter 'supplier' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch(Async)");
        }
        
        // verify the required parameter 'purchasingOrganization' is set
        if (purchasingOrganization == null) {
            throw new ApiException("Missing the required parameter 'purchasingOrganization' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch(Async)");
        }
        
        // verify the required parameter 'supplierSubrange' is set
        if (supplierSubrange == null) {
            throw new ApiException("Missing the required parameter 'supplierSubrange' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch(Async)");
        }
        
        // verify the required parameter 'plant' is set
        if (plant == null) {
            throw new ApiException("Missing the required parameter 'plant' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch(Async)");
        }
        
        // verify the required parameter 'partnerFunction' is set
        if (partnerFunction == null) {
            throw new ApiException("Missing the required parameter 'partnerFunction' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch(Async)");
        }
        
        // verify the required parameter 'partnerCounter' is set
        if (partnerCounter == null) {
            throw new ApiException("Missing the required parameter 'partnerCounter' when calling aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, aSupplierPartnerFuncType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update entity in A_SupplierPartnerFunc
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param aSupplierPartnerFuncType New property values (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatch(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, ModifiedASupplierPartnerFuncType aSupplierPartnerFuncType) throws ApiException {
        aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchWithHttpInfo(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, aSupplierPartnerFuncType);
    }

    /**
     * Update entity in A_SupplierPartnerFunc
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param aSupplierPartnerFuncType New property values (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchWithHttpInfo(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, ModifiedASupplierPartnerFuncType aSupplierPartnerFuncType) throws ApiException {
        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchValidateBeforeCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, aSupplierPartnerFuncType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update entity in A_SupplierPartnerFunc (asynchronously)
     * 
     * @param supplier Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system. (required)
     * @param purchasingOrganization Purchasing Organization   Denotes the purchasing organization. (required)
     * @param supplierSubrange Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address. (required)
     * @param plant Key uniquely identifying a plant. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param aSupplierPartnerFuncType New property values (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchAsync(String supplier, String purchasingOrganization, String supplierSubrange, String plant, String partnerFunction, String partnerCounter, ModifiedASupplierPartnerFuncType aSupplierPartnerFuncType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aSupplierPartnerFuncSupplierSupplierPurchasingOrganizationPurchasingOrganizationSupplierSubrangeSupplierSubrangePlantPlantPartnerFunctionPartnerFunctionPartnerCounterPartnerCounterPatchValidateBeforeCall(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter, aSupplierPartnerFuncType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
}
