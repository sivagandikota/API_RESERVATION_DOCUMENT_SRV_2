/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * Supplier Purchasing Partner Function
 */
@ApiModel(description = "Supplier Purchasing Partner Function")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2019-08-01T06:30:25.755Z")
public class APIBUSINESSPARTNERASupplierPartnerFuncType {
  @SerializedName("Supplier")
  private String supplier = null;

  @SerializedName("PurchasingOrganization")
  private String purchasingOrganization = null;

  @SerializedName("SupplierSubrange")
  private String supplierSubrange = null;

  @SerializedName("Plant")
  private String plant = null;

  @SerializedName("PartnerFunction")
  private String partnerFunction = null;

  @SerializedName("PartnerCounter")
  private String partnerCounter = null;

  public APIBUSINESSPARTNERASupplierPartnerFuncType supplier(String supplier) {
    this.supplier = supplier;
    return this;
  }

   /**
   * Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system.
   * @return supplier
  **/
  @ApiModelProperty(value = "Account Number of Supplier   Specifies an alphanumeric key that uniquely identifies the supplier in the SAP system.")
  public String getSupplier() {
    return supplier;
  }

  public void setSupplier(String supplier) {
    this.supplier = supplier;
  }

  public APIBUSINESSPARTNERASupplierPartnerFuncType purchasingOrganization(String purchasingOrganization) {
    this.purchasingOrganization = purchasingOrganization;
    return this;
  }

   /**
   * Purchasing Organization   Denotes the purchasing organization.
   * @return purchasingOrganization
  **/
  @ApiModelProperty(value = "Purchasing Organization   Denotes the purchasing organization.")
  public String getPurchasingOrganization() {
    return purchasingOrganization;
  }

  public void setPurchasingOrganization(String purchasingOrganization) {
    this.purchasingOrganization = purchasingOrganization;
  }

  public APIBUSINESSPARTNERASupplierPartnerFuncType supplierSubrange(String supplierSubrange) {
    this.supplierSubrange = supplierSubrange;
    return this;
  }

   /**
   * Subdivision of a supplier&#39;s overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \&quot;paint\&quot; sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \&quot;glue\&quot; sub-range.If you order materials from the \&quot;glue\&quot; sub-range, the supplier sub-range finds the Detroit ordering address.
   * @return supplierSubrange
  **/
  @ApiModelProperty(value = "Subdivision of a supplier's overall product range according to various criteria.   For each supplier sub-range:The master data is kept on a common basisCertain conditions applyIn the supplier master, you can create different purchasing data and different  partner functions for each  supplier sub-range.You can also maintain and change the conditions for each supplier sub-range. You assign a material to a supplier sub-range in the info record.In the supplier master, you can maintain different data for particular supplier sub-ranges, such as ordering addresses or terms of payment, for example.When creating a purchase order with a known supplier, different data is only determined if the supplier sub-range is entered in the initial screen.Your supplier Smith in Houston has two sub-ranges: paint and glue.All materials from the \"paint\" sub-range are ordered in Houston.You have maintained an alternative ordering address in Detroit for the \"glue\" sub-range.If you order materials from the \"glue\" sub-range, the supplier sub-range finds the Detroit ordering address.")
  public String getSupplierSubrange() {
    return supplierSubrange;
  }

  public void setSupplierSubrange(String supplierSubrange) {
    this.supplierSubrange = supplierSubrange;
  }

  public APIBUSINESSPARTNERASupplierPartnerFuncType plant(String plant) {
    this.plant = plant;
    return this;
  }

   /**
   * Key uniquely identifying a plant.
   * @return plant
  **/
  @ApiModelProperty(value = "Key uniquely identifying a plant.")
  public String getPlant() {
    return plant;
  }

  public void setPlant(String plant) {
    this.plant = plant;
  }

  public APIBUSINESSPARTNERASupplierPartnerFuncType partnerFunction(String partnerFunction) {
    this.partnerFunction = partnerFunction;
    return this;
  }

   /**
   * The abbreviated form of the name that identifies the partner function.
   * @return partnerFunction
  **/
  @ApiModelProperty(value = "The abbreviated form of the name that identifies the partner function.")
  public String getPartnerFunction() {
    return partnerFunction;
  }

  public void setPartnerFunction(String partnerFunction) {
    this.partnerFunction = partnerFunction;
  }

  public APIBUSINESSPARTNERASupplierPartnerFuncType partnerCounter(String partnerCounter) {
    this.partnerCounter = partnerCounter;
    return this;
  }

   /**
   * The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially.
   * @return partnerCounter
  **/
  @ApiModelProperty(value = "The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially.")
  public String getPartnerCounter() {
    return partnerCounter;
  }

  public void setPartnerCounter(String partnerCounter) {
    this.partnerCounter = partnerCounter;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIBUSINESSPARTNERASupplierPartnerFuncType apIBUSINESSPARTNERASupplierPartnerFuncType = (APIBUSINESSPARTNERASupplierPartnerFuncType) o;
    return Objects.equals(this.supplier, apIBUSINESSPARTNERASupplierPartnerFuncType.supplier) &&
        Objects.equals(this.purchasingOrganization, apIBUSINESSPARTNERASupplierPartnerFuncType.purchasingOrganization) &&
        Objects.equals(this.supplierSubrange, apIBUSINESSPARTNERASupplierPartnerFuncType.supplierSubrange) &&
        Objects.equals(this.plant, apIBUSINESSPARTNERASupplierPartnerFuncType.plant) &&
        Objects.equals(this.partnerFunction, apIBUSINESSPARTNERASupplierPartnerFuncType.partnerFunction) &&
        Objects.equals(this.partnerCounter, apIBUSINESSPARTNERASupplierPartnerFuncType.partnerCounter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(supplier, purchasingOrganization, supplierSubrange, plant, partnerFunction, partnerCounter);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIBUSINESSPARTNERASupplierPartnerFuncType {\n");
    
    sb.append("    supplier: ").append(toIndentedString(supplier)).append("\n");
    sb.append("    purchasingOrganization: ").append(toIndentedString(purchasingOrganization)).append("\n");
    sb.append("    supplierSubrange: ").append(toIndentedString(supplierSubrange)).append("\n");
    sb.append("    plant: ").append(toIndentedString(plant)).append("\n");
    sb.append("    partnerFunction: ").append(toIndentedString(partnerFunction)).append("\n");
    sb.append("    partnerCounter: ").append(toIndentedString(partnerCounter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
  
}

