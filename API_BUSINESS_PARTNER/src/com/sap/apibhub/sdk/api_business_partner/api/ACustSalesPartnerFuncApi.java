/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sap.apibhub.sdk.api_business_partner.model.APIBUSINESSPARTNERACustSalesPartnerFuncType;
import com.sap.apibhub.sdk.api_business_partner.model.CreatedACustSalesPartnerFuncType;
import com.sap.apibhub.sdk.api_business_partner.model.ModifiedACustSalesPartnerFuncType;
import com.sap.apibhub.sdk.api_business_partner.model.OdataError;
import com.sap.apibhub.sdk.api_business_partner.model.Wrapper20;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ACustSalesPartnerFuncApi {
    private ApiClient apiClient;

    public ACustSalesPartnerFuncApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ACustSalesPartnerFuncApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete */
    private com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteCall(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_CustSalesPartnerFunc(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',PartnerCounter='{PartnerCounter}',PartnerFunction='{PartnerFunction}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Customer" + "\\}", apiClient.escapeString(customer.toString()))
        .replaceAll("\\{" + "SalesOrganization" + "\\}", apiClient.escapeString(salesOrganization.toString()))
        .replaceAll("\\{" + "DistributionChannel" + "\\}", apiClient.escapeString(distributionChannel.toString()))
        .replaceAll("\\{" + "Division" + "\\}", apiClient.escapeString(division.toString()))
        .replaceAll("\\{" + "PartnerCounter" + "\\}", apiClient.escapeString(partnerCounter.toString()))
        .replaceAll("\\{" + "PartnerFunction" + "\\}", apiClient.escapeString(partnerFunction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (ifMatch != null)
        localVarHeaderParams.put("If-Match", apiClient.parameterToString(ifMatch));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteValidateBeforeCall(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, String ifMatch, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete(Async)");
        }
        
        // verify the required parameter 'salesOrganization' is set
        if (salesOrganization == null) {
            throw new ApiException("Missing the required parameter 'salesOrganization' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete(Async)");
        }
        
        // verify the required parameter 'distributionChannel' is set
        if (distributionChannel == null) {
            throw new ApiException("Missing the required parameter 'distributionChannel' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete(Async)");
        }
        
        // verify the required parameter 'division' is set
        if (division == null) {
            throw new ApiException("Missing the required parameter 'division' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete(Async)");
        }
        
        // verify the required parameter 'partnerCounter' is set
        if (partnerCounter == null) {
            throw new ApiException("Missing the required parameter 'partnerCounter' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete(Async)");
        }
        
        // verify the required parameter 'partnerFunction' is set
        if (partnerFunction == null) {
            throw new ApiException("Missing the required parameter 'partnerFunction' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, ifMatch, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Delete entity from A_CustSalesPartnerFunc
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param ifMatch ETag (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDelete(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, String ifMatch) throws ApiException {
        aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteWithHttpInfo(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, ifMatch);
    }

    /**
     * Delete entity from A_CustSalesPartnerFunc
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param ifMatch ETag (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteWithHttpInfo(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, String ifMatch) throws ApiException {
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteValidateBeforeCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, ifMatch, null, null);
        return apiClient.execute(call);
    }

    /**
     * Delete entity from A_CustSalesPartnerFunc (asynchronously)
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param ifMatch ETag (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteAsync(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, String ifMatch, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionDeleteValidateBeforeCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, ifMatch, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet */
    private com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetCall(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_CustSalesPartnerFunc(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',PartnerCounter='{PartnerCounter}',PartnerFunction='{PartnerFunction}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Customer" + "\\}", apiClient.escapeString(customer.toString()))
        .replaceAll("\\{" + "SalesOrganization" + "\\}", apiClient.escapeString(salesOrganization.toString()))
        .replaceAll("\\{" + "DistributionChannel" + "\\}", apiClient.escapeString(distributionChannel.toString()))
        .replaceAll("\\{" + "Division" + "\\}", apiClient.escapeString(division.toString()))
        .replaceAll("\\{" + "PartnerCounter" + "\\}", apiClient.escapeString(partnerCounter.toString()))
        .replaceAll("\\{" + "PartnerFunction" + "\\}", apiClient.escapeString(partnerFunction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetValidateBeforeCall(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet(Async)");
        }
        
        // verify the required parameter 'salesOrganization' is set
        if (salesOrganization == null) {
            throw new ApiException("Missing the required parameter 'salesOrganization' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet(Async)");
        }
        
        // verify the required parameter 'distributionChannel' is set
        if (distributionChannel == null) {
            throw new ApiException("Missing the required parameter 'distributionChannel' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet(Async)");
        }
        
        // verify the required parameter 'division' is set
        if (division == null) {
            throw new ApiException("Missing the required parameter 'division' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet(Async)");
        }
        
        // verify the required parameter 'partnerCounter' is set
        if (partnerCounter == null) {
            throw new ApiException("Missing the required parameter 'partnerCounter' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet(Async)");
        }
        
        // verify the required parameter 'partnerFunction' is set
        if (partnerFunction == null) {
            throw new ApiException("Missing the required parameter 'partnerFunction' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entity from A_CustSalesPartnerFunc by key
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return CreatedACustSalesPartnerFuncType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedACustSalesPartnerFuncType aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGet(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, List<String> select) throws ApiException {
        ApiResponse<CreatedACustSalesPartnerFuncType> resp = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetWithHttpInfo(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, select);
        return resp.getData();
    }

    /**
     * Get entity from A_CustSalesPartnerFunc by key
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;CreatedACustSalesPartnerFuncType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedACustSalesPartnerFuncType> aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetWithHttpInfo(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetValidateBeforeCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, select, null, null);
        Type localVarReturnType = new TypeToken<CreatedACustSalesPartnerFuncType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entity from A_CustSalesPartnerFunc by key (asynchronously)
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetAsync(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, List<String> select, final ApiCallback<CreatedACustSalesPartnerFuncType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionGetValidateBeforeCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedACustSalesPartnerFuncType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch */
    private com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchCall(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, ModifiedACustSalesPartnerFuncType aCustSalesPartnerFuncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aCustSalesPartnerFuncType;
        
        // create path and map variables
        String localVarPath = "/A_CustSalesPartnerFunc(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',PartnerCounter='{PartnerCounter}',PartnerFunction='{PartnerFunction}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Customer" + "\\}", apiClient.escapeString(customer.toString()))
        .replaceAll("\\{" + "SalesOrganization" + "\\}", apiClient.escapeString(salesOrganization.toString()))
        .replaceAll("\\{" + "DistributionChannel" + "\\}", apiClient.escapeString(distributionChannel.toString()))
        .replaceAll("\\{" + "Division" + "\\}", apiClient.escapeString(division.toString()))
        .replaceAll("\\{" + "PartnerCounter" + "\\}", apiClient.escapeString(partnerCounter.toString()))
        .replaceAll("\\{" + "PartnerFunction" + "\\}", apiClient.escapeString(partnerFunction.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchValidateBeforeCall(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, ModifiedACustSalesPartnerFuncType aCustSalesPartnerFuncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch(Async)");
        }
        
        // verify the required parameter 'salesOrganization' is set
        if (salesOrganization == null) {
            throw new ApiException("Missing the required parameter 'salesOrganization' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch(Async)");
        }
        
        // verify the required parameter 'distributionChannel' is set
        if (distributionChannel == null) {
            throw new ApiException("Missing the required parameter 'distributionChannel' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch(Async)");
        }
        
        // verify the required parameter 'division' is set
        if (division == null) {
            throw new ApiException("Missing the required parameter 'division' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch(Async)");
        }
        
        // verify the required parameter 'partnerCounter' is set
        if (partnerCounter == null) {
            throw new ApiException("Missing the required parameter 'partnerCounter' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch(Async)");
        }
        
        // verify the required parameter 'partnerFunction' is set
        if (partnerFunction == null) {
            throw new ApiException("Missing the required parameter 'partnerFunction' when calling aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, aCustSalesPartnerFuncType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update entity in A_CustSalesPartnerFunc
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param aCustSalesPartnerFuncType New property values (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatch(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, ModifiedACustSalesPartnerFuncType aCustSalesPartnerFuncType) throws ApiException {
        aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchWithHttpInfo(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, aCustSalesPartnerFuncType);
    }

    /**
     * Update entity in A_CustSalesPartnerFunc
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param aCustSalesPartnerFuncType New property values (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchWithHttpInfo(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, ModifiedACustSalesPartnerFuncType aCustSalesPartnerFuncType) throws ApiException {
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchValidateBeforeCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, aCustSalesPartnerFuncType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update entity in A_CustSalesPartnerFunc (asynchronously)
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel The way in which products or services reach the customer. Typical examples of distribution channels are wholesale, retail, or direct sales.   You can maintain information about customers and materials by sales organization and distribution channel. Within a sales organization you can deliver goods to a given customer through more than one distribution channel.You can assign a distribution channel to one or more sales organizations. If, for example, you have numerous sales organizations, each sales organization may use the \&quot;Wholesale\&quot; distribution channel.For each combination of sales organization and distribution channel, you can further assign one or more of the divisions that are defined for the sales organization. You can, for example, assign \&quot;Food\&quot; and \&quot;Non-food\&quot; divisions to the \&quot;Wholesale\&quot; distribution channel. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param partnerCounter The sequential number that the system applies when there is more than one partner for a particular partner function.   When you create a sales order for a particular customer, there may be more than one ship-to party defined. The different ship-to parties are numbered sequentially. (required)
     * @param partnerFunction The abbreviated form of the name that identifies the partner function. (required)
     * @param aCustSalesPartnerFuncType New property values (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchAsync(String customer, String salesOrganization, String distributionChannel, String division, String partnerCounter, String partnerFunction, ModifiedACustSalesPartnerFuncType aCustSalesPartnerFuncType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustSalesPartnerFuncCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionPartnerCounterPartnerCounterPartnerFunctionPartnerFunctionPatchValidateBeforeCall(customer, salesOrganization, distributionChannel, division, partnerCounter, partnerFunction, aCustSalesPartnerFuncType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aCustSalesPartnerFuncGet */
    private com.squareup.okhttp.Call aCustSalesPartnerFuncGetCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_CustSalesPartnerFunc".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$top", top));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$skip", skip));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$filter", filter));
        if (inlinecount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$inlinecount", inlinecount));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$orderby", orderby));
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustSalesPartnerFuncGetValidateBeforeCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncGetCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entities from A_CustSalesPartnerFunc
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return Wrapper20
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wrapper20 aCustSalesPartnerFuncGet(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        ApiResponse<Wrapper20> resp = aCustSalesPartnerFuncGetWithHttpInfo(top, skip, filter, inlinecount, orderby, select);
        return resp.getData();
    }

    /**
     * Get entities from A_CustSalesPartnerFunc
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;Wrapper20&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wrapper20> aCustSalesPartnerFuncGetWithHttpInfo(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, null, null);
        Type localVarReturnType = new TypeToken<Wrapper20>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entities from A_CustSalesPartnerFunc (asynchronously)
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustSalesPartnerFuncGetAsync(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ApiCallback<Wrapper20> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustSalesPartnerFuncGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wrapper20>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aCustSalesPartnerFuncPost */
    private com.squareup.okhttp.Call aCustSalesPartnerFuncPostCall(APIBUSINESSPARTNERACustSalesPartnerFuncType aCustSalesPartnerFuncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aCustSalesPartnerFuncType;
        
        // create path and map variables
        String localVarPath = "/A_CustSalesPartnerFunc".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustSalesPartnerFuncPostValidateBeforeCall(APIBUSINESSPARTNERACustSalesPartnerFuncType aCustSalesPartnerFuncType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncPostCall(aCustSalesPartnerFuncType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new entity to A_CustSalesPartnerFunc
     * 
     * @param aCustSalesPartnerFuncType New entity (optional)
     * @return CreatedACustSalesPartnerFuncType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedACustSalesPartnerFuncType aCustSalesPartnerFuncPost(APIBUSINESSPARTNERACustSalesPartnerFuncType aCustSalesPartnerFuncType) throws ApiException {
        ApiResponse<CreatedACustSalesPartnerFuncType> resp = aCustSalesPartnerFuncPostWithHttpInfo(aCustSalesPartnerFuncType);
        return resp.getData();
    }

    /**
     * Add new entity to A_CustSalesPartnerFunc
     * 
     * @param aCustSalesPartnerFuncType New entity (optional)
     * @return ApiResponse&lt;CreatedACustSalesPartnerFuncType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedACustSalesPartnerFuncType> aCustSalesPartnerFuncPostWithHttpInfo(APIBUSINESSPARTNERACustSalesPartnerFuncType aCustSalesPartnerFuncType) throws ApiException {
        com.squareup.okhttp.Call call = aCustSalesPartnerFuncPostValidateBeforeCall(aCustSalesPartnerFuncType, null, null);
        Type localVarReturnType = new TypeToken<CreatedACustSalesPartnerFuncType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new entity to A_CustSalesPartnerFunc (asynchronously)
     * 
     * @param aCustSalesPartnerFuncType New entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustSalesPartnerFuncPostAsync(APIBUSINESSPARTNERACustSalesPartnerFuncType aCustSalesPartnerFuncType, final ApiCallback<CreatedACustSalesPartnerFuncType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustSalesPartnerFuncPostValidateBeforeCall(aCustSalesPartnerFuncType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedACustSalesPartnerFuncType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
