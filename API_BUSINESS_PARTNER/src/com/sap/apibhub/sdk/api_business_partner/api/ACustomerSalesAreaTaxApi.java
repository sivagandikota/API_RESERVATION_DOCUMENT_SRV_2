/*
 * OData Service for Business Partner
 * This service enables you to create, read, update, and    delete master data related to Business Partners,    Suppliers, and Customers in an SAP S/4HANA system.
 *
 * OpenAPI spec version: 1 
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sap.apibhub.sdk.api_business_partner.api;

import com.sap.apibhub.sdk.client.ApiCallback;
import com.sap.apibhub.sdk.client.ApiClient;
import com.sap.apibhub.sdk.client.ApiException;
import com.sap.apibhub.sdk.client.ApiResponse;
import com.sap.apibhub.sdk.client.Configuration;
import com.sap.apibhub.sdk.client.Pair;
import com.sap.apibhub.sdk.client.ProgressRequestBody;
import com.sap.apibhub.sdk.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sap.apibhub.sdk.api_business_partner.model.APIBUSINESSPARTNERACustomerSalesAreaTaxType;
import com.sap.apibhub.sdk.api_business_partner.model.CreatedACustomerSalesAreaTaxType;
import com.sap.apibhub.sdk.api_business_partner.model.ModifiedACustomerSalesAreaTaxType;
import com.sap.apibhub.sdk.api_business_partner.model.OdataError;
import com.sap.apibhub.sdk.api_business_partner.model.Wrapper18;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ACustomerSalesAreaTaxApi {
    private ApiClient apiClient;

    public ACustomerSalesAreaTaxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ACustomerSalesAreaTaxApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /* Build call for aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet */
    private com.squareup.okhttp.Call aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetCall(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_CustomerSalesAreaTax(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Customer" + "\\}", apiClient.escapeString(customer.toString()))
        .replaceAll("\\{" + "SalesOrganization" + "\\}", apiClient.escapeString(salesOrganization.toString()))
        .replaceAll("\\{" + "DistributionChannel" + "\\}", apiClient.escapeString(distributionChannel.toString()))
        .replaceAll("\\{" + "Division" + "\\}", apiClient.escapeString(division.toString()))
        .replaceAll("\\{" + "DepartureCountry" + "\\}", apiClient.escapeString(departureCountry.toString()))
        .replaceAll("\\{" + "CustomerTaxCategory" + "\\}", apiClient.escapeString(customerTaxCategory.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetValidateBeforeCall(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(Async)");
        }
        
        // verify the required parameter 'salesOrganization' is set
        if (salesOrganization == null) {
            throw new ApiException("Missing the required parameter 'salesOrganization' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(Async)");
        }
        
        // verify the required parameter 'distributionChannel' is set
        if (distributionChannel == null) {
            throw new ApiException("Missing the required parameter 'distributionChannel' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(Async)");
        }
        
        // verify the required parameter 'division' is set
        if (division == null) {
            throw new ApiException("Missing the required parameter 'division' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(Async)");
        }
        
        // verify the required parameter 'departureCountry' is set
        if (departureCountry == null) {
            throw new ApiException("Missing the required parameter 'departureCountry' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(Async)");
        }
        
        // verify the required parameter 'customerTaxCategory' is set
        if (customerTaxCategory == null) {
            throw new ApiException("Missing the required parameter 'customerTaxCategory' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetCall(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entity from A_CustomerSalesAreaTax by key
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel Reference distrib.channel for cust.and material masters   Specifies a distribution channel that you want to use as a reference for customer and material master data for other distribution channels.   You can specify one distribution channel as the source of customer and material master data for other distribution channels. You need then only to maintain the data in one place.Distrib.channel Ref.distrib.channel01 0102 0103 0104 04In this example, only distribution channels 01 and 04 have customer and material master data defined. Distribution channels 01, 02, and 03 share the master data that you defined for distribution channel 01. Distribution channel 04 has its own master data. When you create a sales order in distribution channel 03, the system checks the customer and material master data against the data defined for distribution channel 01. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param departureCountry Departure country (country from which the goods are sent)   Identifies the country in which the delivery originates.   You can define the country key in a table. As a rule, it is a good idea to use the existing international standards for identifying vehicles from different countries (for example: USA &#x3D; United States, I &#x3D; Italy, and so on). The system uses the key tohelp determine the relevant taxes during pricingdetermine important country-specific standards (the length of postal codes and bank account numbers, for example) (required)
     * @param customerTaxCategory Tax category (sales tax, federal sales tax,...)   Identifies the condition that the system uses to automatically determine country-specific taxes during pricing.   You can define one or more tax categories for each country. During sales order processing, the system applies the tax category according tothe geographical location of your delivering plant and the location of the customer receiving the goodstax classifications in the customer master record and the material master record.In the USA, for example, you can define tax categories for Federal Sales Tax and Federal Excise Tax. In the U.K., you can define a tax category for Value Added Tax (VAT). (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return CreatedACustomerSalesAreaTaxType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedACustomerSalesAreaTaxType aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGet(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, List<String> select) throws ApiException {
        ApiResponse<CreatedACustomerSalesAreaTaxType> resp = aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetWithHttpInfo(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory, select);
        return resp.getData();
    }

    /**
     * Get entity from A_CustomerSalesAreaTax by key
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel Reference distrib.channel for cust.and material masters   Specifies a distribution channel that you want to use as a reference for customer and material master data for other distribution channels.   You can specify one distribution channel as the source of customer and material master data for other distribution channels. You need then only to maintain the data in one place.Distrib.channel Ref.distrib.channel01 0102 0103 0104 04In this example, only distribution channels 01 and 04 have customer and material master data defined. Distribution channels 01, 02, and 03 share the master data that you defined for distribution channel 01. Distribution channel 04 has its own master data. When you create a sales order in distribution channel 03, the system checks the customer and material master data against the data defined for distribution channel 01. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param departureCountry Departure country (country from which the goods are sent)   Identifies the country in which the delivery originates.   You can define the country key in a table. As a rule, it is a good idea to use the existing international standards for identifying vehicles from different countries (for example: USA &#x3D; United States, I &#x3D; Italy, and so on). The system uses the key tohelp determine the relevant taxes during pricingdetermine important country-specific standards (the length of postal codes and bank account numbers, for example) (required)
     * @param customerTaxCategory Tax category (sales tax, federal sales tax,...)   Identifies the condition that the system uses to automatically determine country-specific taxes during pricing.   You can define one or more tax categories for each country. During sales order processing, the system applies the tax category according tothe geographical location of your delivering plant and the location of the customer receiving the goodstax classifications in the customer master record and the material master record.In the USA, for example, you can define tax categories for Federal Sales Tax and Federal Excise Tax. In the U.K., you can define a tax category for Value Added Tax (VAT). (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;CreatedACustomerSalesAreaTaxType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedACustomerSalesAreaTaxType> aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetWithHttpInfo(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetValidateBeforeCall(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory, select, null, null);
        Type localVarReturnType = new TypeToken<CreatedACustomerSalesAreaTaxType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entity from A_CustomerSalesAreaTax by key (asynchronously)
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel Reference distrib.channel for cust.and material masters   Specifies a distribution channel that you want to use as a reference for customer and material master data for other distribution channels.   You can specify one distribution channel as the source of customer and material master data for other distribution channels. You need then only to maintain the data in one place.Distrib.channel Ref.distrib.channel01 0102 0103 0104 04In this example, only distribution channels 01 and 04 have customer and material master data defined. Distribution channels 01, 02, and 03 share the master data that you defined for distribution channel 01. Distribution channel 04 has its own master data. When you create a sales order in distribution channel 03, the system checks the customer and material master data against the data defined for distribution channel 01. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param departureCountry Departure country (country from which the goods are sent)   Identifies the country in which the delivery originates.   You can define the country key in a table. As a rule, it is a good idea to use the existing international standards for identifying vehicles from different countries (for example: USA &#x3D; United States, I &#x3D; Italy, and so on). The system uses the key tohelp determine the relevant taxes during pricingdetermine important country-specific standards (the length of postal codes and bank account numbers, for example) (required)
     * @param customerTaxCategory Tax category (sales tax, federal sales tax,...)   Identifies the condition that the system uses to automatically determine country-specific taxes during pricing.   You can define one or more tax categories for each country. During sales order processing, the system applies the tax category according tothe geographical location of your delivering plant and the location of the customer receiving the goodstax classifications in the customer master record and the material master record.In the USA, for example, you can define tax categories for Federal Sales Tax and Federal Excise Tax. In the U.K., you can define a tax category for Value Added Tax (VAT). (required)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetAsync(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, List<String> select, final ApiCallback<CreatedACustomerSalesAreaTaxType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryGetValidateBeforeCall(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedACustomerSalesAreaTaxType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch */
    private com.squareup.okhttp.Call aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchCall(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, ModifiedACustomerSalesAreaTaxType aCustomerSalesAreaTaxType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aCustomerSalesAreaTaxType;
        
        // create path and map variables
        String localVarPath = "/A_CustomerSalesAreaTax(Customer='{Customer}',SalesOrganization='{SalesOrganization}',DistributionChannel='{DistributionChannel}',Division='{Division}',DepartureCountry='{DepartureCountry}',CustomerTaxCategory='{CustomerTaxCategory}')".replaceAll("\\{format\\}","json")
        .replaceAll("\\{" + "Customer" + "\\}", apiClient.escapeString(customer.toString()))
        .replaceAll("\\{" + "SalesOrganization" + "\\}", apiClient.escapeString(salesOrganization.toString()))
        .replaceAll("\\{" + "DistributionChannel" + "\\}", apiClient.escapeString(distributionChannel.toString()))
        .replaceAll("\\{" + "Division" + "\\}", apiClient.escapeString(division.toString()))
        .replaceAll("\\{" + "DepartureCountry" + "\\}", apiClient.escapeString(departureCountry.toString()))
        .replaceAll("\\{" + "CustomerTaxCategory" + "\\}", apiClient.escapeString(customerTaxCategory.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchValidateBeforeCall(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, ModifiedACustomerSalesAreaTaxType aCustomerSalesAreaTaxType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'customer' is set
        if (customer == null) {
            throw new ApiException("Missing the required parameter 'customer' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(Async)");
        }
        
        // verify the required parameter 'salesOrganization' is set
        if (salesOrganization == null) {
            throw new ApiException("Missing the required parameter 'salesOrganization' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(Async)");
        }
        
        // verify the required parameter 'distributionChannel' is set
        if (distributionChannel == null) {
            throw new ApiException("Missing the required parameter 'distributionChannel' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(Async)");
        }
        
        // verify the required parameter 'division' is set
        if (division == null) {
            throw new ApiException("Missing the required parameter 'division' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(Async)");
        }
        
        // verify the required parameter 'departureCountry' is set
        if (departureCountry == null) {
            throw new ApiException("Missing the required parameter 'departureCountry' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(Async)");
        }
        
        // verify the required parameter 'customerTaxCategory' is set
        if (customerTaxCategory == null) {
            throw new ApiException("Missing the required parameter 'customerTaxCategory' when calling aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(Async)");
        }
        
        
        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchCall(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory, aCustomerSalesAreaTaxType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Update entity in A_CustomerSalesAreaTax
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel Reference distrib.channel for cust.and material masters   Specifies a distribution channel that you want to use as a reference for customer and material master data for other distribution channels.   You can specify one distribution channel as the source of customer and material master data for other distribution channels. You need then only to maintain the data in one place.Distrib.channel Ref.distrib.channel01 0102 0103 0104 04In this example, only distribution channels 01 and 04 have customer and material master data defined. Distribution channels 01, 02, and 03 share the master data that you defined for distribution channel 01. Distribution channel 04 has its own master data. When you create a sales order in distribution channel 03, the system checks the customer and material master data against the data defined for distribution channel 01. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param departureCountry Departure country (country from which the goods are sent)   Identifies the country in which the delivery originates.   You can define the country key in a table. As a rule, it is a good idea to use the existing international standards for identifying vehicles from different countries (for example: USA &#x3D; United States, I &#x3D; Italy, and so on). The system uses the key tohelp determine the relevant taxes during pricingdetermine important country-specific standards (the length of postal codes and bank account numbers, for example) (required)
     * @param customerTaxCategory Tax category (sales tax, federal sales tax,...)   Identifies the condition that the system uses to automatically determine country-specific taxes during pricing.   You can define one or more tax categories for each country. During sales order processing, the system applies the tax category according tothe geographical location of your delivering plant and the location of the customer receiving the goodstax classifications in the customer master record and the material master record.In the USA, for example, you can define tax categories for Federal Sales Tax and Federal Excise Tax. In the U.K., you can define a tax category for Value Added Tax (VAT). (required)
     * @param aCustomerSalesAreaTaxType New property values (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatch(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, ModifiedACustomerSalesAreaTaxType aCustomerSalesAreaTaxType) throws ApiException {
        aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchWithHttpInfo(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory, aCustomerSalesAreaTaxType);
    }

    /**
     * Update entity in A_CustomerSalesAreaTax
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel Reference distrib.channel for cust.and material masters   Specifies a distribution channel that you want to use as a reference for customer and material master data for other distribution channels.   You can specify one distribution channel as the source of customer and material master data for other distribution channels. You need then only to maintain the data in one place.Distrib.channel Ref.distrib.channel01 0102 0103 0104 04In this example, only distribution channels 01 and 04 have customer and material master data defined. Distribution channels 01, 02, and 03 share the master data that you defined for distribution channel 01. Distribution channel 04 has its own master data. When you create a sales order in distribution channel 03, the system checks the customer and material master data against the data defined for distribution channel 01. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param departureCountry Departure country (country from which the goods are sent)   Identifies the country in which the delivery originates.   You can define the country key in a table. As a rule, it is a good idea to use the existing international standards for identifying vehicles from different countries (for example: USA &#x3D; United States, I &#x3D; Italy, and so on). The system uses the key tohelp determine the relevant taxes during pricingdetermine important country-specific standards (the length of postal codes and bank account numbers, for example) (required)
     * @param customerTaxCategory Tax category (sales tax, federal sales tax,...)   Identifies the condition that the system uses to automatically determine country-specific taxes during pricing.   You can define one or more tax categories for each country. During sales order processing, the system applies the tax category according tothe geographical location of your delivering plant and the location of the customer receiving the goodstax classifications in the customer master record and the material master record.In the USA, for example, you can define tax categories for Federal Sales Tax and Federal Excise Tax. In the U.K., you can define a tax category for Value Added Tax (VAT). (required)
     * @param aCustomerSalesAreaTaxType New property values (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchWithHttpInfo(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, ModifiedACustomerSalesAreaTaxType aCustomerSalesAreaTaxType) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchValidateBeforeCall(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory, aCustomerSalesAreaTaxType, null, null);
        return apiClient.execute(call);
    }

    /**
     * Update entity in A_CustomerSalesAreaTax (asynchronously)
     * 
     * @param customer Customer Number   Gives an alphanumeric key, which clearly identifies the customer or vendor in the SAP system. (required)
     * @param salesOrganization An organizational unit responsible for the sale of certain products or services. The responsibility of a sales organization may include legal liability for products and customer claims.   You can assign any number of distribution channels and divisions to a sales organization. A particular combination of sales organization, distribution channel, and division is known as a sales area. (required)
     * @param distributionChannel Reference distrib.channel for cust.and material masters   Specifies a distribution channel that you want to use as a reference for customer and material master data for other distribution channels.   You can specify one distribution channel as the source of customer and material master data for other distribution channels. You need then only to maintain the data in one place.Distrib.channel Ref.distrib.channel01 0102 0103 0104 04In this example, only distribution channels 01 and 04 have customer and material master data defined. Distribution channels 01, 02, and 03 share the master data that you defined for distribution channel 01. Distribution channel 04 has its own master data. When you create a sales order in distribution channel 03, the system checks the customer and material master data against the data defined for distribution channel 01. (required)
     * @param division A way of grouping materials, products, or services. The system uses divisions to determine the sales areas and the business areas for a material, product, or service.   A product or service is always assigned to just one division. From the point of view of sales and distribution, the use of divisions lets you organize your sales structure around groups of similar products or product lines. This allows the people in a division who process orders and service customers to specialize within a manageable area of expertise.If a sales organization sells food and non-food products through both retail and wholesaledistribution channels each distribution channel could then be further split into food and non-food divisions. (required)
     * @param departureCountry Departure country (country from which the goods are sent)   Identifies the country in which the delivery originates.   You can define the country key in a table. As a rule, it is a good idea to use the existing international standards for identifying vehicles from different countries (for example: USA &#x3D; United States, I &#x3D; Italy, and so on). The system uses the key tohelp determine the relevant taxes during pricingdetermine important country-specific standards (the length of postal codes and bank account numbers, for example) (required)
     * @param customerTaxCategory Tax category (sales tax, federal sales tax,...)   Identifies the condition that the system uses to automatically determine country-specific taxes during pricing.   You can define one or more tax categories for each country. During sales order processing, the system applies the tax category according tothe geographical location of your delivering plant and the location of the customer receiving the goodstax classifications in the customer master record and the material master record.In the USA, for example, you can define tax categories for Federal Sales Tax and Federal Excise Tax. In the U.K., you can define a tax category for Value Added Tax (VAT). (required)
     * @param aCustomerSalesAreaTaxType New property values (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchAsync(String customer, String salesOrganization, String distributionChannel, String division, String departureCountry, String customerTaxCategory, ModifiedACustomerSalesAreaTaxType aCustomerSalesAreaTaxType, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxCustomerCustomerSalesOrganizationSalesOrganizationDistributionChannelDistributionChannelDivisionDivisionDepartureCountryDepartureCountryCustomerTaxCategoryCustomerTaxCategoryPatchValidateBeforeCall(customer, salesOrganization, distributionChannel, division, departureCountry, customerTaxCategory, aCustomerSalesAreaTaxType, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /* Build call for aCustomerSalesAreaTaxGet */
    private com.squareup.okhttp.Call aCustomerSalesAreaTaxGetCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/A_CustomerSalesAreaTax".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (top != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$top", top));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$skip", skip));
        if (filter != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$filter", filter));
        if (inlinecount != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "$inlinecount", inlinecount));
        if (orderby != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$orderby", orderby));
        if (select != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("multi", "$select", select));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerSalesAreaTaxGetValidateBeforeCall(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxGetCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get entities from A_CustomerSalesAreaTax
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return Wrapper18
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Wrapper18 aCustomerSalesAreaTaxGet(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        ApiResponse<Wrapper18> resp = aCustomerSalesAreaTaxGetWithHttpInfo(top, skip, filter, inlinecount, orderby, select);
        return resp.getData();
    }

    /**
     * Get entities from A_CustomerSalesAreaTax
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @return ApiResponse&lt;Wrapper18&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Wrapper18> aCustomerSalesAreaTaxGetWithHttpInfo(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, null, null);
        Type localVarReturnType = new TypeToken<Wrapper18>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get entities from A_CustomerSalesAreaTax (asynchronously)
     * 
     * @param top Show only the first n items, see [OData Paging - Top](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374630) (optional)
     * @param skip Skip the first n items, see [OData Paging - Skip](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374631) (optional)
     * @param filter Filter items by property values, see [OData Filtering](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374625) (optional)
     * @param inlinecount Include count of items, see [OData Count](http://www.odata.org/documentation/odata-version-2-0/uri-conventions/#InlinecountSystemQueryOption) (optional)
     * @param orderby Order items by property values, see [OData Sorting](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374629) (optional)
     * @param select Select properties to be returned, see [OData Select](http://docs.oasis-open.org/odata/odata/v4.0/odata-v4.0-part1-protocol.html#_Toc445374620) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerSalesAreaTaxGetAsync(Integer top, Integer skip, String filter, String inlinecount, List<String> orderby, List<String> select, final ApiCallback<Wrapper18> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxGetValidateBeforeCall(top, skip, filter, inlinecount, orderby, select, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Wrapper18>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /* Build call for aCustomerSalesAreaTaxPost */
    private com.squareup.okhttp.Call aCustomerSalesAreaTaxPostCall(APIBUSINESSPARTNERACustomerSalesAreaTaxType aCustomerSalesAreaTaxType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = aCustomerSalesAreaTaxType;
        
        // create path and map variables
        String localVarPath = "/A_CustomerSalesAreaTax".replaceAll("\\{format\\}","json");

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {"APIBHUB_SANDBOX_APIKEY", "basicAuthentication" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call aCustomerSalesAreaTaxPostValidateBeforeCall(APIBUSINESSPARTNERACustomerSalesAreaTaxType aCustomerSalesAreaTaxType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxPostCall(aCustomerSalesAreaTaxType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Add new entity to A_CustomerSalesAreaTax
     * 
     * @param aCustomerSalesAreaTaxType New entity (optional)
     * @return CreatedACustomerSalesAreaTaxType
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CreatedACustomerSalesAreaTaxType aCustomerSalesAreaTaxPost(APIBUSINESSPARTNERACustomerSalesAreaTaxType aCustomerSalesAreaTaxType) throws ApiException {
        ApiResponse<CreatedACustomerSalesAreaTaxType> resp = aCustomerSalesAreaTaxPostWithHttpInfo(aCustomerSalesAreaTaxType);
        return resp.getData();
    }

    /**
     * Add new entity to A_CustomerSalesAreaTax
     * 
     * @param aCustomerSalesAreaTaxType New entity (optional)
     * @return ApiResponse&lt;CreatedACustomerSalesAreaTaxType&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CreatedACustomerSalesAreaTaxType> aCustomerSalesAreaTaxPostWithHttpInfo(APIBUSINESSPARTNERACustomerSalesAreaTaxType aCustomerSalesAreaTaxType) throws ApiException {
        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxPostValidateBeforeCall(aCustomerSalesAreaTaxType, null, null);
        Type localVarReturnType = new TypeToken<CreatedACustomerSalesAreaTaxType>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Add new entity to A_CustomerSalesAreaTax (asynchronously)
     * 
     * @param aCustomerSalesAreaTaxType New entity (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call aCustomerSalesAreaTaxPostAsync(APIBUSINESSPARTNERACustomerSalesAreaTaxType aCustomerSalesAreaTaxType, final ApiCallback<CreatedACustomerSalesAreaTaxType> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = aCustomerSalesAreaTaxPostValidateBeforeCall(aCustomerSalesAreaTaxType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CreatedACustomerSalesAreaTaxType>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
